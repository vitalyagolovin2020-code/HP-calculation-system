jsx
import React, { useState } from 'react';

export default function App() {
  const [maxHealth, setMaxHealth] = useState('');
  const [dexterityMod, setDexterityMod] = useState(0);
  const [constitutionMod, setConstitutionMod] = useState(0);
  const [hasShield, setHasShield] = useState(false);
  const [armorStrength, setArmorStrength] = useState('');
  const [shieldStrength, setShieldStrength] = useState('');
  const [calculated, setCalculated] = useState(false);
  const [selectedAction, setSelectedAction] = useState('damage');
  const [selectedBodyPart, setSelectedBodyPart] = useState('');
  const [amount, setAmount] = useState('');
  const [selectedModifier, setSelectedModifier] = useState('none');
  const [resistanceType, setResistanceType] = useState('none');
  const [blockingOption, setBlockingOption] = useState('none');

  // Инициализация состояния частей тела
  const [bodyParts, setBodyParts] = useState({
    leftArm: { max: 0, current: 0 },
    rightArm: { max: 0, current: 0 },
    leftLeg: { max: 0, current: 0 },
    rightLeg: { max: 0, current: 0 },
    torso: { max: 0, current: 0 },
    head: { max: 0, current: 0 }
  });

  const calculateBodyPartsHealth = () => {
    if (!maxHealth || isNaN(maxHealth) || maxHealth <= 0) {
      alert('Пожалуйста, введите корректное значение максимального здоровья');
      return;
    }
    
    if (hasShield && (!shieldStrength || isNaN(shieldStrength) || shieldStrength < 0)) {
      alert('Пожалуйста, введите корректное значение крепкости щита');
      return;
    }
    
    if (!armorStrength || isNaN(armorStrength) || armorStrength < 0) {
      alert('Пожалуйста, введите корректное значение крепкости доспехов');
      return;
    }
    
    const max = parseInt(maxHealth);
    
    const newBodyParts = {
      leftArm: { 
        max: Math.max(1, Math.round(max * 0.2)), 
        current: Math.max(1, Math.round(max * 0.2))
      },
      rightArm: { 
        max: Math.max(1, Math.round(max * 0.2)), 
        current: Math.max(1, Math.round(max * 0.2))
      },
      leftLeg: { 
        max: Math.max(1, Math.round(max * 0.2)), 
        current: Math.max(1, Math.round(max * 0.2))
      },
      rightLeg: { 
        max: Math.max(1, Math.round(max * 0.2)), 
        current: Math.max(1, Math.round(max * 0.2))
      },
      torso: { 
        max: Math.max(1, Math.round(max * 0.5)), 
        current: Math.max(1, Math.round(max * 0.5))
      },
      head: { 
        max: Math.max(1, Math.round(max * 0.2)), 
        current: Math.max(1, Math.round(max * 0.2))
      }
    };
    
    setBodyParts(newBodyParts);
    setCalculated(true);
  };

  const resetCalculation = () => {
    setMaxHealth('');
    setDexterityMod(0);
    setConstitutionMod(0);
    setHasShield(false);
    setArmorStrength('');
    setShieldStrength('');
    setCalculated(false);
    setBodyParts({
      leftArm: { max: 0, current: 0 },
      rightArm: { max: 0, current: 0 },
      leftLeg: { max: 0, current: 0 },
      rightLeg: { max: 0, current: 0 },
      torso: { max: 0, current: 0 },
      head: { max: 0, current: 0 }
    });
    setSelectedAction('damage');
    setSelectedBodyPart('');
    setAmount('');
    setSelectedModifier('none');
    setResistanceType('none');
    setBlockingOption('none');
  };

  const applyEffect = () => {
    if (!selectedBodyPart || !amount || isNaN(amount) || amount <= 0) {
      alert('Пожалуйста, выберите часть тела и введите корректное количество');
      return;
    }

    let newBodyParts = { ...bodyParts };
    let currentArmorStrength = parseInt(armorStrength) || 0;
    let currentShieldStrength = hasShield ? parseInt(shieldStrength) || 0 : 0;
    let messages = [];
    
    if (selectedAction === 'damage') {
      let finalDamage = parseInt(amount);
      
      // 1. Блокирование урона с помощью доспехов/щита (первый этап)
      if (blockingOption !== 'none' && finalDamage > 0) {
        const isHeadAttack = selectedBodyPart === 'head';
        const baseCost = blockingOption === 'half' ? 1 : 2;
        const costMultiplier = isHeadAttack ? 2 : 1;
        const totalCost = baseCost * costMultiplier;
        
        // Сначала пытаемся использовать щит, если он есть
        if (hasShield && currentShieldStrength >= totalCost) {
          currentShieldStrength -= totalCost;
          messages.push(`Щит блокировал ${blockingOption === 'half' ? 'половину' : 'весь'} урон по ${getBodyPartName(selectedBodyPart)} (${totalCost} единиц крепкости потрачено)`);
          
          if (blockingOption === 'half') {
            finalDamage = Math.ceil(finalDamage / 2);
          } else {
            finalDamage = 0;
          }
        }
        // Если щита нет или недостаточно крепкости, используем доспехи
        else if (currentArmorStrength >= totalCost) {
          currentArmorStrength -= totalCost;
          messages.push(`Доспехи блокировали ${blockingOption === 'half' ? 'половину' : 'весь'} урон по ${getBodyPartName(selectedBodyPart)} (${totalCost} единиц крепкости потрачено)`);
          
          if (blockingOption === 'half') {
            finalDamage = Math.ceil(finalDamage / 2);
          } else {
            finalDamage = 0;
          }
        }
        else {
          messages.push("Недостаточно крепкости для блокирования! Блокирование отменено.");
        }
      }
      
      // 2. Применение модификаторов для уменьшения урона (второй этап)
      if (finalDamage > 0 && selectedModifier !== 'none') {
        const modValue = selectedModifier === 'dexterity' ? dexterityMod : constitutionMod;
        // Уменьшение урона на фиксированную величину, равную абсолютному значению модификатора
        const reduction = Math.abs(modValue);
        const reducedDamage = finalDamage - reduction;
        
        if (reducedDamage !== finalDamage) {
          if (reducedDamage <= 0) {
            messages.push(`Урон полностью нейтрализован благодаря модификатору ${selectedModifier === 'dexterity' ? 'ловкости' : 'телосложения'} (${modValue})`);
            finalDamage = 0;
          } else {
            messages.push(`Урон снижен с ${finalDamage} до ${reducedDamage} благодаря модификатору ${selectedModifier === 'dexterity' ? 'ловкости' : 'телосложения'} (${modValue})`);
            finalDamage = reducedDamage;
          }
        }
      }
      
      // 3. Применение сопротивления или иммунитета (третий этап)
      if (finalDamage > 0) {
        if (resistanceType === 'immunity') {
          messages.push("Иммунитет активирован! Урон полностью нейтрализован.");
          finalDamage = 0;
        }
        else if (resistanceType === 'resistance') {
          const halfDamage = Math.ceil(finalDamage / 2);
          messages.push(`Сопротивление активировано! Урон снижен с ${finalDamage} до ${halfDamage}`);
          finalDamage = halfDamage;
        }
      }
      
      // 4. Нанесение оставшегося урона части тела (четвертый этап)
      if (finalDamage > 0) {
        // Проверка на переполнение урона
        const damageToApply = Math.min(finalDamage, newBodyParts[selectedBodyPart].current);
        const overflowDamage = finalDamage - damageToApply;
        
        // Нанесение урона выбранной части тела
        newBodyParts[selectedBodyPart].current = Math.max(0, newBodyParts[selectedBodyPart].current - damageToApply);
        
        // Перенос остаточного урона на торс, если применимо
        if (overflowDamage > 0 && (selectedBodyPart === 'leftArm' || selectedBodyPart === 'rightArm' || 
                                  selectedBodyPart === 'leftLeg' || selectedBodyPart === 'rightLeg')) {
          let torsoDamage = overflowDamage;
          
          // Применение модификатора к перенаправленному урону
          if (selectedModifier !== 'none') {
            const modValue = selectedModifier === 'dexterity' ? dexterityMod : constitutionMod;
            const reduction = Math.abs(modValue);
            torsoDamage = Math.max(0, torsoDamage - reduction);
          }
          
          // Применение сопротивления к перенаправленному урону
          if (resistanceType === 'resistance') {
            torsoDamage = Math.ceil(torsoDamage / 2);
          }
          
          newBodyParts.torso.current = Math.max(0, newBodyParts.torso.current - torsoDamage);
          if (torsoDamage > 0) {
            messages.push(`Остаточный урон ${torsoDamage} перенаправлен на торс`);
          }
        }
      }
      
      // Проверка на недееспособность частей тела
      const checkDisabilities = () => {
        const disabilities = [];
        
        // Проверка рук
        const leftArmDisabled = newBodyParts.leftArm.current === 0;
        const rightArmDisabled = newBodyParts.rightArm.current === 0;
        
        if (leftArmDisabled || rightArmDisabled) {
          if (leftArmDisabled && rightArmDisabled) {
            disabilities.push("Недееспособные руки: потеряна возможность совершать действия руками, потеряно основное и дополнительное действия");
          } else {
            disabilities.push("Недееспособная рука: потеряна возможность совершать действия этой рукой, потеряно дополнительное действие");
          }
        }
        
        // Проверка ног
        const leftLegDisabled = newBodyParts.leftLeg.current === 0;
        const rightLegDisabled = newBodyParts.rightLeg.current === 0;
        
        if (leftLegDisabled || rightLegDisabled) {
          if (leftLegDisabled && rightLegDisabled) {
            disabilities.push("Недееспособные ноги: персонаж падает навзничь, максимальное передвижение = 10");
          } else {
            disabilities.push("Недееспособная нога: потеряна половина скорости передвижения");
          }
        }
        
        // Проверка торса
        if (newBodyParts.torso.current === 0) {
          disabilities.push("Недееспособный торс: персонаж становится недееспособным, получает 2 провала на спасброски от смерти");
        }
        
        // Проверка головы
        if (newBodyParts.head.current === 0) {
          disabilities.push("Недееспособная голова: персонаж становится недееспособным, получает 2 провала на спасброски от смерти");
        }
        
        return disabilities;
      };
      
      const disabilities = checkDisabilities();
      if (disabilities.length > 0) {
        messages.push(...disabilities);
      }
      
      // Обновляем состояние крепкости
      setArmorStrength(currentArmorStrength.toString());
      if (hasShield) {
        setShieldStrength(currentShieldStrength.toString());
      }
      
      // Показ сообщений
      if (messages.length > 0) {
        alert(messages.join('\n\n'));
      }
    } else {
      // Лечение
      const healAmount = parseInt(amount);
      newBodyParts[selectedBodyPart].current = Math.min(
        bodyParts[selectedBodyPart].max,
        bodyParts[selectedBodyPart].current + healAmount
      );
      
      if (healAmount > 0) {
        alert(`Выполнено лечение на ${healAmount} единиц здоровья для ${getBodyPartName(selectedBodyPart)}`);
      }
    }
    
    setBodyParts(newBodyParts);
    setAmount('');
  };

  const getBodyPartName = (part) => {
    const names = {
      leftArm: 'Левой руки',
      rightArm: 'Правой руки',
      leftLeg: 'Левой ноги',
      rightLeg: 'Правой ноги',
      torso: 'Торса',
      head: 'Головы'
    };
    return names[part] || part;
  };

  const getTotalMaxHealth = () => {
    return Object.values(bodyParts).reduce((sum, part) => sum + part.max, 0);
  };

  const getHealthPercentage = (current, max) => {
    return max > 0 ? Math.round((current / max) * 100) : 0;
  };

  const isCritical = (current, max) => {
    return current <= max * 0.25; // Критически низкое здоровье при <= 25%
  };

  const getHealthColor = (current, max) => {
    const percentage = getHealthPercentage(current, max);
    if (percentage <= 25) return 'bg-red-500';
    if (percentage <= 50) return 'bg-yellow-500';
    return 'bg-green-500';
  };

  const getDisabilityInfo = (part) => {
    switch (part) {
      case 'leftArm':
      case 'rightArm':
        return "При нулевом здоровье: потеря возможности совершать действия этой рукой и дополнительного действия";
      case 'leftLeg':
      case 'rightLeg':
        return "При нулевом здоровье: потеря половины скорости передвижения";
      case 'torso':
        return "При нулевом здоровье: персонаж становится недееспособным, получает 2 провала на спасброски от смерти";
      case 'head':
        return "При нулевом здоровье: персонаж становится недееспособным, получает 2 провала на спасброски от смерти";
      default:
        return "";
    }
  };

  const getDisabilityStatus = (part) => {
    if (part === 'leftArm' && bodyParts.leftArm.current === 0 && bodyParts.rightArm.current === 0) {
      return "НЕДЕЕСПОСОБНЫЕ РУКИ";
    }
    if (part === 'rightArm' && bodyParts.leftArm.current === 0 && bodyParts.rightArm.current === 0) {
      return "НЕДЕЕСПОСОБНЫЕ РУКИ";
    }
    if (part === 'leftLeg' && bodyParts.leftLeg.current === 0 && bodyParts.rightLeg.current === 0) {
      return "НЕДЕЕСПОСОБНЫЕ НОГИ";
    }
    if (part === 'rightLeg' && bodyParts.leftLeg.current === 0 && bodyParts.rightLeg.current === 0) {
      return "НЕДЕЕСПОСОБНЫЕ НОГИ";
    }
    
    if (part === 'leftArm' && bodyParts.leftArm.current === 0) return "НЕДЕЕСПОСОБНА";
    if (part === 'rightArm' && bodyParts.rightArm.current === 0) return "НЕДЕЕСПОСОБНА";
    if (part === 'leftLeg' && bodyParts.leftLeg.current === 0) return "НЕДЕЕСПОСОБНА";
    if (part === 'rightLeg' && bodyParts.rightLeg.current === 0) return "НЕДЕЕСПОСОБНА";
    if (part === 'torso' && bodyParts.torso.current === 0) return "НЕДЕЕСПОСОБЕН";
    if (part === 'head' && bodyParts.head.current === 0) return "НЕДЕЕСПОСОБНА";
    
    return null;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-100 py-8 px-4">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">Система распределения здоровья</h1>
          <p className="text-lg text-gray-600">Введите параметры персонажа для расчета и управления здоровьем частей тела</p>
        </div>

        {/* Основные параметры */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-6">Основные параметры персонажа</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label htmlFor="maxHealth" className="block text-lg font-semibold text-gray-700 mb-3">
                Максимальное здоровье:
              </label>
              <input
                type="number"
                id="maxHealth"
                value={maxHealth}
                onChange={(e) => setMaxHealth(e.target.value)}
                placeholder="Введите число"
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg"
                min="1"
                disabled={calculated}
              />
            </div>
            
            <div>
              <label htmlFor="dexterityMod" className="block text-lg font-semibold text-gray-700 mb-3">
                Модификатор ловкости:
              </label>
              <input
                type="number"
                id="dexterityMod"
                value={dexterityMod}
                onChange={(e) => setDexterityMod(parseInt(e.target.value) || 0)}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-green-500 focus:outline-none text-lg"
                min="-10"
                max="10"
                disabled={calculated}
              />
            </div>
            
            <div>
              <label htmlFor="constitutionMod" className="block text-lg font-semibold text-gray-700 mb-3">
                Модификатор телосложения:
              </label>
              <input
                type="number"
                id="constitutionMod"
                value={constitutionMod}
                onChange={(e) => setConstitutionMod(parseInt(e.target.value) || 0)}
                className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none text-lg"
                min="-10"
                max="10"
                disabled={calculated}
              />
            </div>
          </div>

          <div className="mt-6">
            <div className="flex items-center gap-4 mb-4">
              <input
                type="checkbox"
                id="hasShield"
                checked={hasShield}
                onChange={(e) => setHasShield(e.target.checked)}
                className="w-5 h-5 text-blue-600 border-2 border-gray-300 rounded focus:ring-blue-500"
                disabled={calculated}
              />
              <label htmlFor="hasShield" className="text-lg font-semibold text-gray-700">
                Персонаж имеет щит
              </label>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label htmlFor="armorStrength" className="block text-lg font-semibold text-gray-700 mb-3">
                  Крепкость доспехов:
                </label>
                <input
                  type="number"
                  id="armorStrength"
                  value={armorStrength}
                  onChange={(e) => setArmorStrength(e.target.value)}
                  placeholder="Введите число"
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none text-lg"
                  min="0"
                  disabled={calculated}
                />
              </div>
              
              {hasShield && (
                <div>
                  <label htmlFor="shieldStrength" className="block text-lg font-semibold text-gray-700 mb-3">
                    Крепкость щита:
                  </label>
                  <input
                    type="number"
                    id="shieldStrength"
                    value={shieldStrength}
                    onChange={(e) => setShieldStrength(e.target.value)}
                    placeholder="Введите число"
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg"
                    min="0"
                    disabled={calculated}
                  />
                </div>
              )}
            </div>
          </div>
          
          <div className="flex flex-wrap gap-3 mt-6">
            {!calculated ? (
              <button
                onClick={calculateBodyPartsHealth}
                className="px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors duration-200 text-lg"
              >
                Рассчитать здоровье
              </button>
            ) : (
              <button
                onClick={resetCalculation}
                className="px-6 py-3 bg-gray-500 text-white font-semibold rounded-lg hover:bg-gray-600 transition-colors duration-200 text-lg"
              >
                Сбросить
              </button>
            )}
          </div>
        </div>

        {calculated && (
          <>
            {/* Механика воздействия */}
            <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">Применить воздействие</h2>
              <div className="grid grid-cols-1 md:grid-cols-6 gap-4 items-end">
                <div>
                  <label className="block text-lg font-semibold text-gray-700 mb-3">Действие:</label>
                  <select
                    value={selectedAction}
                    onChange={(e) => setSelectedAction(e.target.value)}
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none text-lg"
                  >
                    <option value="damage">Нанести урон</option>
                    <option value="heal">Лечить</option>
                  </select>
                </div>

                <div>
                  <label className="block text-lg font-semibold text-gray-700 mb-3">Часть тела:</label>
                  <select
                    value={selectedBodyPart}
                    onChange={(e) => setSelectedBodyPart(e.target.value)}
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-green-500 focus:outline-none text-lg"
                  >
                    <option value="">Выберите часть тела</option>
                    <option value="leftArm">Левая рука</option>
                    <option value="rightArm">Правая рука</option>
                    <option value="leftLeg">Левая нога</option>
                    <option value="rightLeg">Правая нога</option>
                    <option value="torso">Торс</option>
                    <option value="head">Голова</option>
                  </select>
                </div>

                <div>
                  <label htmlFor="amount" className="block text-lg font-semibold text-gray-700 mb-3">
                    Количество:
                  </label>
                  <input
                    type="number"
                    id="amount"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="Введите число"
                    className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none text-lg"
                    min="1"
                  />
                </div>

                {selectedAction === 'damage' && (
                  <>
                    <div>
                      <label className="block text-lg font-semibold text-gray-700 mb-3">Модификатор:</label>
                      <select
                        value={selectedModifier}
                        onChange={(e) => setSelectedModifier(e.target.value)}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-orange-500 focus:outline-none text-lg"
                      >
                        <option value="none">Без модификатора</option>
                        <option value="dexterity">Ловкость ({dexterityMod})</option>
                        <option value="constitution">Телосложение ({constitutionMod})</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-lg font-semibold text-gray-700 mb-3">Сопротивление:</label>
                      <select
                        value={resistanceType}
                        onChange={(e) => setResistanceType(e.target.value)}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-red-500 focus:outline-none text-lg"
                      >
                        <option value="none">Нет сопротивления</option>
                        <option value="resistance">Сопротивление (½ урона)</option>
                        <option value="immunity">Иммунитет (0 урона)</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-lg font-semibold text-gray-700 mb-3">Блокирование:</label>
                      <select
                        value={blockingOption}
                        onChange={(e) => setBlockingOption(e.target.value)}
                        className="w-full px-4 py-3 border-2 border-gray-300 rounded-lg focus:border-green-500 focus:outline-none text-lg"
                      >
                        <option value="none">Без блокирования</option>
                        <option value="half">Блокировать половину урона</option>
                        <option value="full">Блокировать весь урон</option>
                      </select>
                    </div>
                  </>
                )}

                <div>
                  <button
                    onClick={applyEffect}
                    className={`w-full px-6 py-3 font-semibold rounded-lg transition-colors duration-200 text-lg ${
                      selectedAction === 'damage'
                        ? 'bg-red-600 hover:bg-red-700 text-white'
                        : 'bg-green-600 hover:bg-green-700 text-white'
                    }`}
                  >
                    {selectedAction === 'damage' ? 'Нанести урон' : 'Лечить'}
                  </button>
                </div>
              </div>

              {selectedAction === 'damage' && (
                <div className="mt-4 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-semibold text-blue-800 mb-2">Порядок обработки урона:</h4>
                  <ol className="text-sm text-blue-700 space-y-1">
                    <li>1. Блокирование урона крепкостью доспехов/щита</li>
                    <li>2. Уменьшение урона на фиксированную величину от модификатора ловкости или телосложения</li>
                    <li>3. Дополнительное уменьшение урона сопротивлением или иммунитетом</li>
                    <li>4. Нанесение оставшегося урона части тела</li>
                  </ol>
                  <div className="mt-2 text-xs text-blue-600">
                    * При атаке по голове стоимость блокирования удваивается
                  </div>
                </div>
              )}
            </div>

            {/* Информация о защите */}
            <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">Защитное снаряжение</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-orange-50 rounded-xl p-6">
                  <h3 className="text-xl font-bold text-orange-800 mb-3">Доспехи</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between text-lg">
                      <span>Крепкость:</span>
                      <span className="font-bold">{armorStrength}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className="h-3 bg-orange-500 rounded-full transition-all duration-300"
                        style={{ width: `${armorStrength ? (parseInt(armorStrength) / 20) * 100 : 0}%` }}
                      ></div>
                    </div>
                  </div>
                </div>

                {hasShield && (
                  <div className="bg-blue-50 rounded-xl p-6">
                    <h3 className="text-xl font-bold text-blue-800 mb-3">Щит</h3>
                    <div className="space-y-2">
                      <div className="flex justify-between text-lg">
                        <span>Крепкость:</span>
                        <span className="font-bold">{shieldStrength}</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-3">
                        <div 
                          className="h-3 bg-blue-500 rounded-full transition-all duration-300"
                          style={{ width: `${shieldStrength ? (parseInt(shieldStrength) / 20) * 100 : 0}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Частей тела */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Левая рука */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Левая рука</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.leftArm.current} / {bodyParts.leftArm.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.leftArm.current, bodyParts.leftArm.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.leftArm.current, bodyParts.leftArm.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('leftArm') && (
                      <div className="text-sm font-semibold mt-1" style={{
                        color: getDisabilityStatus('leftArm').includes('РУКИ') ? '#ef4444' : '#dc2626'
                      }}>
                        {getDisabilityStatus('leftArm')}
                      </div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('leftArm')}</div>
                </div>
              </div>

              {/* Правая рука */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Правая рука</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.rightArm.current} / {bodyParts.rightArm.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.rightArm.current, bodyParts.rightArm.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.rightArm.current, bodyParts.rightArm.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('rightArm') && (
                      <div className="text-sm font-semibold mt-1" style={{
                        color: getDisabilityStatus('rightArm').includes('РУКИ') ? '#ef4444' : '#dc2626'
                      }}>
                        {getDisabilityStatus('rightArm')}
                      </div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('rightArm')}</div>
                </div>
              </div>

              {/* Левая нога */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Левая нога</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.leftLeg.current} / {bodyParts.leftLeg.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.leftLeg.current, bodyParts.leftLeg.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.leftLeg.current, bodyParts.leftLeg.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('leftLeg') && (
                      <div className="text-sm font-semibold mt-1" style={{
                        color: getDisabilityStatus('leftLeg').includes('НОГИ') ? '#ef4444' : '#dc2626'
                      }}>
                        {getDisabilityStatus('leftLeg')}
                      </div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('leftLeg')}</div>
                </div>
              </div>

              {/* Правая нога */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Правая нога</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.rightLeg.current} / {bodyParts.rightLeg.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.rightLeg.current, bodyParts.rightLeg.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.rightLeg.current, bodyParts.rightLeg.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('rightLeg') && (
                      <div className="text-sm font-semibold mt-1" style={{
                        color: getDisabilityStatus('rightLeg').includes('НОГИ') ? '#ef4444' : '#dc2626'
                      }}>
                        {getDisabilityStatus('rightLeg')}
                      </div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('rightLeg')}</div>
                </div>
              </div>

              {/* Торс */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200 col-span-1 lg:col-span-2">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Торс</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.torso.current} / {bodyParts.torso.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.torso.current, bodyParts.torso.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.torso.current, bodyParts.torso.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('torso') && (
                      <div className="text-sm font-semibold mt-1 text-red-600">{getDisabilityStatus('torso')}</div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('torso')}</div>
                </div>
              </div>

              {/* Голова */}
              <div className="bg-white rounded-2xl shadow-lg p-6 transform hover:scale-105 transition-transform duration-200 col-span-1 lg:col-span-2">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center">
                    <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <circle cx="12" cy="8" r="5" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 18c0 2.2-4 4-8 4s-8-1.8-8-4" />
                    </svg>
                  </div>
                  <h3 className="text-2xl font-bold text-gray-800">Голова</h3>
                </div>
                <div className="ml-16 space-y-3">
                  <div>
                    <div className="flex justify-between text-sm text-gray-600 mb-1">
                      <span>Текущее здоровье</span>
                      <span>{bodyParts.head.current} / {bodyParts.head.max}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-3">
                      <div 
                        className={`h-3 rounded-full transition-all duration-300 ${getHealthColor(bodyParts.head.current, bodyParts.head.max)}`}
                        style={{ width: `${getHealthPercentage(bodyParts.head.current, bodyParts.head.max)}%` }}
                      ></div>
                    </div>
                    {getDisabilityStatus('head') && (
                      <div className="text-sm font-semibold mt-1 text-red-600">{getDisabilityStatus('head')}</div>
                    )}
                  </div>
                  <div className="text-gray-600 text-sm">{getDisabilityInfo('head')}</div>
                </div>
              </div>
            </div>
          </>
        )}

        {!calculated && (
          <div className="bg-white rounded-2xl shadow-lg p-8 text-center">
            <div className="text-gray-500 text-lg">
              Введите параметры персонажа и нажмите "Рассчитать здоровье", чтобы начать управление здоровьем частей тела.
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
